import java.awt.Color;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.table.TableRowSorter;
import javax.swing.event.DocumentListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;

public class EmpDB extends javax.swing.JFrame {

    int numBuckets = 2;
    MyHT theHT = new MyHT(numBuckets);
    int action = -1; //0 for add, 1 for remove, 2 for modify, 3 for search
    EmployeeInfo someEmp;
    TableRowSorter<DefaultTableModel> rowSorter;
    DefaultTableModel model;
    DocumentListener docLis;
    Object[] row;
    int numErrors = 14;
    boolean errors[] = new boolean[numErrors];
    boolean isError = false;

    /**
     * Creates new form EmpDB
     */
    public EmpDB() {
        initComponents();
        this.model = (DefaultTableModel) empTable.getModel();
        this.rowSorter = new TableRowSorter<>((DefaultTableModel) empTable.getModel());
        getData();
        updateTable();
        resetErrors();
        enterEmpNum.setText("Employee Number");
        enterFName.setText("First Name");
        enterLName.setText("Last Name");
        workLocBox.setSelectedIndex(0);
        enterDeducRate.setText("Deductions Rate");
        enterAnnualSalary.setText("Annual Salary");
        enterHourlyWage.setText("Hourly Wage");
        enterHoursPWeek.setText("Hours Per Week");
        enterWeeksPYear.setText("Weeks Per Year");
        empNumLabel.setVisible(false);
        enterEmpNum.setVisible(false);
        fNameLabel.setVisible(false);
        enterFName.setVisible(false);
        lNameLabel.setVisible(false);
        enterLName.setVisible(false);
        deducRateLabel.setVisible(false);
        enterDeducRate.setVisible(false);
        workLocLabel.setVisible(false);
        workLocBox.setVisible(false);
        empType.setVisible(false);
        annualSalaryLabel.setVisible(false);
        enterAnnualSalary.setVisible(false);
        hourlyWageLabel.setVisible(false);
        enterHourlyWage.setVisible(false);
        hoursPWeekLabel.setVisible(false);
        enterHoursPWeek.setVisible(false);
        weeksPYearLabel.setVisible(false);
        enterWeeksPYear.setVisible(false);
        saveButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        databasePanel = new javax.swing.JPanel();
        addEmpButton = new javax.swing.JButton();
        enterFName = new javax.swing.JTextField();
        enterLName = new javax.swing.JTextField();
        enterDeducRate = new javax.swing.JTextField();
        fNameLabel = new javax.swing.JLabel();
        lNameLabel = new javax.swing.JLabel();
        deducRateLabel = new javax.swing.JLabel();
        workLocLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        empTable = new javax.swing.JTable();
        empType = new javax.swing.JComboBox<>();
        enterAnnualSalary = new javax.swing.JTextField();
        enterHourlyWage = new javax.swing.JTextField();
        enterHoursPWeek = new javax.swing.JTextField();
        enterWeeksPYear = new javax.swing.JTextField();
        hourlyWageLabel = new javax.swing.JLabel();
        annualSalaryLabel = new javax.swing.JLabel();
        hoursPWeekLabel = new javax.swing.JLabel();
        weeksPYearLabel = new javax.swing.JLabel();
        removeEmpButton = new javax.swing.JButton();
        modifyEmpButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        searchEmpButton = new javax.swing.JButton();
        enterEmpNum = new javax.swing.JTextField();
        empNumLabel = new javax.swing.JLabel();
        workLocBox = new javax.swing.JComboBox<>();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        databasePanel.setPreferredSize(new java.awt.Dimension(800, 540));

        addEmpButton.setText("Add");
        addEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmpButtonActionPerformed(evt);
            }
        });

        enterFName.setText("First Name");
        enterFName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterFNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterFNameFocusLost(evt);
            }
        });
        enterFName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterFNameMouseClicked(evt);
            }
        });

        enterLName.setText("Last Name");
        enterLName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterLNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterLNameFocusLost(evt);
            }
        });
        enterLName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterLNameMouseClicked(evt);
            }
        });

        enterDeducRate.setText("Deductions Rate");
        enterDeducRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterDeducRateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterDeducRateFocusLost(evt);
            }
        });
        enterDeducRate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterDeducRateMouseClicked(evt);
            }
        });

        fNameLabel.setText("First Name");

        lNameLabel.setText("Last Name");

        deducRateLabel.setText("Deductions Rate");

        workLocLabel.setText("Work Location");

        empTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee #", "First Name", "Last Name", "Location", "Type", "Hourly Wage", "Hours Per Week", "Weeks Per Year", "Annual Salary", "Deductions Rate", "Net Income ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        empTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(empTable);
        if (empTable.getColumnModel().getColumnCount() > 0) {
            empTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            empTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            empTable.getColumnModel().getColumn(10).setResizable(false);
        }

        empType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Type", "Full Time", "Part Time" }));
        empType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empTypeActionPerformed(evt);
            }
        });

        enterAnnualSalary.setText("Annual Salary");
        enterAnnualSalary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterAnnualSalaryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterAnnualSalaryFocusLost(evt);
            }
        });
        enterAnnualSalary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterAnnualSalaryMouseClicked(evt);
            }
        });

        enterHourlyWage.setText("Hourly Wage");
        enterHourlyWage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterHourlyWageFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterHourlyWageFocusLost(evt);
            }
        });
        enterHourlyWage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterHourlyWageMouseClicked(evt);
            }
        });

        enterHoursPWeek.setText("Hours Per Week");
        enterHoursPWeek.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterHoursPWeekFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterHoursPWeekFocusLost(evt);
            }
        });
        enterHoursPWeek.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterHoursPWeekMouseClicked(evt);
            }
        });

        enterWeeksPYear.setText("Weeks Per Year");
        enterWeeksPYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterWeeksPYearFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterWeeksPYearFocusLost(evt);
            }
        });
        enterWeeksPYear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterWeeksPYearMouseClicked(evt);
            }
        });

        hourlyWageLabel.setText("Hourly Wage");

        annualSalaryLabel.setText("Annual Salary");

        hoursPWeekLabel.setText("Hours Per Week");

        weeksPYearLabel.setText("Weeks Per Year");

        removeEmpButton.setText("Remove");
        removeEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmpButtonActionPerformed(evt);
            }
        });

        modifyEmpButton.setText("Modify");
        modifyEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyEmpButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        searchEmpButton.setText("Search");
        searchEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmpButtonActionPerformed(evt);
            }
        });

        enterEmpNum.setText("Employee Number");
        enterEmpNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterEmpNumFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterEmpNumFocusLost(evt);
            }
        });
        enterEmpNum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterEmpNumMouseClicked(evt);
            }
        });
        enterEmpNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterEmpNumActionPerformed(evt);
            }
        });

        empNumLabel.setText("Employee Number");

        workLocBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Mississauga", "Ottawa", "Boston" }));

        javax.swing.GroupLayout databasePanelLayout = new javax.swing.GroupLayout(databasePanel);
        databasePanel.setLayout(databasePanelLayout);
        databasePanelLayout.setHorizontalGroup(
            databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(modifyEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, databasePanelLayout.createSequentialGroup()
                                .addComponent(addEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(weeksPYearLabel)
                        .addComponent(enterWeeksPYear, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(empNumLabel)
                        .addComponent(enterEmpNum))
                    .addComponent(workLocLabel)
                    .addGroup(databasePanelLayout.createSequentialGroup()
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterHourlyWage, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fNameLabel)
                            .addComponent(hourlyWageLabel)
                            .addComponent(enterFName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(workLocBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 102, Short.MAX_VALUE)
                                .addComponent(empType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(databasePanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lNameLabel)
                                    .addComponent(hoursPWeekLabel)
                                    .addComponent(annualSalaryLabel)
                                    .addComponent(enterHoursPWeek, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                    .addComponent(enterAnnualSalary)
                                    .addComponent(deducRateLabel)))
                            .addGroup(databasePanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(enterLName, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databasePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enterDeducRate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1088, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        databasePanelLayout.setVerticalGroup(
            databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(databasePanelLayout.createSequentialGroup()
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addEmpButton)
                            .addComponent(removeEmpButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modifyEmpButton)
                            .addComponent(searchEmpButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(empNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(enterEmpNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fNameLabel)
                            .addComponent(lNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(workLocLabel)
                            .addComponent(deducRateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterDeducRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(workLocBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(annualSalaryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterAnnualSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(empType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hourlyWageLabel)
                            .addComponent(hoursPWeekLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterHourlyWage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterHoursPWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weeksPYearLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterWeeksPYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1338, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getData() {
        if (someEmp != null) {
            theHT.addToTable(someEmp);
        }

        BufferedReader input = null;
        try {
            input = new BufferedReader(new FileReader("Data.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MyHT.class.getName()).log(Level.SEVERE, null, ex);
        }

        int temp;
        try {
            while (input.ready() == true) {
                int empNum = 0;
                String fName = "";
                String lName = "";
                double deducRate = 0;
                int workLoc;
                char type;
                double annualSalary = 0;
                double hourlyWage = 0;
                double hoursPWeek = 0;
                double weeksPYear = 0;
                boolean aDec = false;
                int countADec = 0;

                while ((temp = input.read()) != 32) {//empNum
                    empNum = empNum * 10 + Character.getNumericValue(temp);
                }

                while ((temp = input.read()) != 32) {//fName
                    fName = fName + ((char) temp);
                }

                while ((temp = input.read()) != 32) {//lName
                    lName = lName + ((char) temp);
                }

                while ((temp = input.read()) != 32) {//deducRate
                    if (temp == 46) {
                        aDec = true;
                    } else if (!aDec) {
                        deducRate = deducRate * 10 + Character.getNumericValue(temp);
                    } else if (aDec) {
                        countADec--;
                        deducRate = deducRate + Character.getNumericValue(temp) * Math.pow(10, countADec);
                    }//if
                }
                workLoc = Character.getNumericValue(input.read());

                input.read();
                type = ((char) input.read());
                input.read();

                if (type == 'F') {
                    aDec = false;
                    countADec = 0;

                    while ((temp = input.read()) != 13 && (temp) != -1) {//annualSalary
                        if (temp == 46) {
                            aDec = true;
                        } else if (!aDec) {
                            annualSalary = annualSalary * 10 + Character.getNumericValue(temp);
                        } else if (aDec) {
                            countADec--;
                            annualSalary = annualSalary + Character.getNumericValue(temp) * Math.pow(10, countADec);
                        }//if
                    }//while
                    someEmp = new FullTimeEmployee(empNum, fName, lName, deducRate, workLoc, annualSalary);
                }//if FullTime
                else if (type == 'P') {
                    aDec = false;
                    countADec = 0;

                    while ((temp = input.read()) != 32) {//hourlyWage
                        if (temp == 46) {
                            aDec = true;
                        } else if (!aDec) {
                            hourlyWage = hourlyWage * 10 + Character.getNumericValue(temp);
                        } else if (aDec) {
                            countADec--;
                            hourlyWage = hourlyWage + Character.getNumericValue(temp) * Math.pow(10, countADec);
                        }//if
                    }//while

                    aDec = false;
                    countADec = 0;

                    while ((temp = input.read()) != 32) {//hoursPWeek
                        if (temp == 46) {
                            aDec = true;
                        } else if (!aDec) {
                            hoursPWeek = hoursPWeek * 10 + Character.getNumericValue(temp);
                        } else if (aDec) {
                            countADec--;
                            hoursPWeek = hoursPWeek + Character.getNumericValue(temp) * Math.pow(10, countADec);
                        }//if
                    }//while

                    aDec = false;
                    countADec = 0;

                    while ((temp = input.read()) != 13 && (temp) != -1) {//weeksPYear
                        if (temp == 46) {
                            aDec = true;
                        } else if (!aDec) {
                            weeksPYear = weeksPYear * 10 + Character.getNumericValue(temp);
                        } else if (aDec) {
                            countADec--;
                            weeksPYear = weeksPYear + Character.getNumericValue(temp) * Math.pow(10, countADec);
                        }//if
                    }//while
                    someEmp = new PartTimeEmployee(empNum, fName, lName, deducRate, workLoc, hourlyWage, hoursPWeek, weeksPYear);
                }//If PartTime
                theHT.addToTable(someEmp);
                someEmp = null;
                if (input.ready()) {
                    input.read();
                }
            }//For each emp
        } catch (IOException ex) {
            Logger.getLogger(EmpDB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTable() {
        if (someEmp != null) {
            theHT.addToTable(someEmp);
        }

        try {
            model.setRowCount(0);
            System.out.println("Worked");
        } catch (IndexOutOfBoundsException hi) {
            System.out.println(model.getRowCount());
            model.setRowCount(0);
        }

        for (int a = 0; a < numBuckets; a++) {
            for (int b = 0; b < theHT.getBuckets()[a].size(); b++) {
                someEmp = theHT.getBuckets()[a].get(b);
                DecimalFormat df = new DecimalFormat("#.00");
                String sWorkLoc;
                switch (someEmp.getWorkLocation()) {
                    case 1:
                        sWorkLoc = "Mississauga";
                        break;
                    case 2:
                        sWorkLoc = "Ottawa";
                        break;
                    case 3:
                        sWorkLoc = "Boston";
                        break;
                    default:
                        sWorkLoc = "";
                        break;
                }
                if (someEmp instanceof PartTimeEmployee) {
                    Object[] row1 = {someEmp.getEmployeeNumber(), someEmp.getFirstName(), someEmp.getLastName(), sWorkLoc, "Part Time", df.format(((PartTimeEmployee) someEmp).getHourlyWage()), df.format(((PartTimeEmployee) someEmp).getHoursPerWeek()), df.format(((PartTimeEmployee) someEmp).getWeeksPerYear()), "N/A", df.format(someEmp.getDeductionsRate()), df.format(((PartTimeEmployee) someEmp).calcYearlyNetIncome())};
                    row = row1;
                }//if PartTime
                else {
                    Object[] row1 = {someEmp.getEmployeeNumber(), someEmp.getFirstName(), someEmp.getLastName(), sWorkLoc, "Full Time", "N/A", "N/A", "N/A", df.format(((FullTimeEmployee) someEmp).getAnnualSalary()), df.format(someEmp.getDeductionsRate()), df.format(((FullTimeEmployee) someEmp).calcYearlyNetIncome())};
                    row = row1;
                }//if FullTime

                if (model.getRowCount() == 0) {
                    model.addRow(row);
                } else if (someEmp.getEmployeeNumber() < ((int) empTable.getValueAt(0, 0))) {
                    model.insertRow(0, row);
                } else {
                    boolean inserted = false;
                    int countRow = 1;
                    while (!inserted && countRow < model.getRowCount()) {
                        if (((int) empTable.getValueAt(countRow - 1, 0)) < someEmp.getEmployeeNumber() && someEmp.getEmployeeNumber() < ((int) empTable.getValueAt(countRow, 0))) {
                            model.insertRow(countRow, row);
                            inserted = true;
                        }
                        countRow++;
                    }
                    if (!inserted) {
                        model.addRow(row);
                    }
                }

                row = null;
                someEmp = null;
            }//For each emp
        }//for each bucket

        for (int a = model.getRowCount(); a < 24; a++) {
            Object[] row1 = {};
            row = row1;
            model.addRow(row);
        }
    }//updateTable

    public void tableSortFilter() {
        empTable.setRowSorter(rowSorter);

        enterEmpNum.getDocument().addDocumentListener(docLis = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = enterEmpNum.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text, 0));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = enterEmpNum.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }

    private void resetErrors() {
        for (int a = 0; a < numErrors; a++) {
            errors[a] = false;
        }
    }

    private boolean rMErrorCheck() {
        isError = false;
        resetErrors();
        try {
            Integer.parseInt(enterEmpNum.getText());
            if (Integer.parseInt(enterEmpNum.getText()) < 0) {//if enterEmpNum is invalid
                errors[0] = true;
                isError = true;
                enterEmpNum.setText("Employee Number");
            } else if (theHT.searchTable(Integer.parseInt(enterEmpNum.getText())) == -1) {//if enterEmpNum is not in use
                errors[1] = true;
                isError = true;
                enterEmpNum.setText("Employee Number");
            }
        } catch (NumberFormatException a) {//if enterEmpNum doesn't have an int
            errors[0] = true;
            isError = true;
            enterEmpNum.setText("Employee Number");
        }

        if (isError) {
            new Error(errors).setVisible(true);
        }
        return isError;
    }

    private boolean modifyAddErrorCheck() {
        isError = false;
        resetErrors();

        try {
            Integer.parseInt(enterEmpNum.getText());
            if (Integer.parseInt(enterEmpNum.getText()) < 0) {//if enterEmpNum is invalid
                errors[0] = true;
            } else if (theHT.searchTable(Integer.parseInt(enterEmpNum.getText())) != -1) {//if empNum is already in use
                errors[2] = true;
                isError = true;
            }
        } catch (NumberFormatException a) {//if empNum is invalid
            errors[0] = true;
            isError = true;
        }

        if ("First Name".equals(enterFName.getText())) {
            errors[3] = true;
            isError = true;
        }
        for (int a=0;a<enterFName.getText().length();a++){
            if (enterFName.getText().charAt(a)==' '){
                errors[12]=true;
                isError=true;
            }
        }

        if ("Last Name".equals(enterLName.getText())) {
            errors[4] = true;
            isError = true;
        }
        for (int a=0;a<enterLName.getText().length();a++){
            if (enterLName.getText().charAt(a)==' '){
                errors[13]=true;
                isError=true;
            }
        }

        if (workLocBox.getSelectedIndex() == 0) {
            errors[5] = true;
            isError = true;
        }

        try {
            Double.parseDouble(enterDeducRate.getText());
            if (Double.parseDouble(enterDeducRate.getText()) < 0 || Double.parseDouble(enterDeducRate.getText()) > 1) {
                errors[6] = true;
                isError = true;
            }
        } catch (NumberFormatException | NullPointerException a) {
            errors[6] = true;
            isError = true;
        }

        switch (empType.getSelectedIndex()) {
            case 0:
                errors[7] = true;
                isError = true;
                break;
            case 1:
                try {
                    Double.parseDouble(enterAnnualSalary.getText());
                    if (Double.parseDouble(enterAnnualSalary.getText()) < 0) {
                        errors[8] = true;
                        isError = true;
                    }
                } catch (NumberFormatException | NullPointerException a) {
                    errors[8] = true;
                    isError = true;
                }
                break;
            case 2:
                try {
                    Double.parseDouble(enterHourlyWage.getText());
                    if (Double.parseDouble(enterHourlyWage.getText()) < 0) {
                        errors[9] = true;
                        isError = true;
                    }
                } catch (NumberFormatException | NullPointerException a) {
                    errors[9] = true;
                    isError = true;
                }
                try {
                    Double.parseDouble(enterHoursPWeek.getText());
                    if (Double.parseDouble(enterHoursPWeek.getText()) < 0) {
                        errors[10] = true;
                        isError = true;
                    }
                } catch (NumberFormatException | NullPointerException a) {
                    errors[10] = true;
                    isError = true;
                }
                try {
                    Double.parseDouble(enterWeeksPYear.getText());
                    if (Double.parseDouble(enterWeeksPYear.getText()) < 0) {
                        errors[11] = true;
                        isError = true;
                    }
                } catch (NumberFormatException | NullPointerException a) {
                    errors[11] = true;
                    isError = true;
                }
                break;
            default:
                break;
        }

        if (isError) {
            new Error(errors).setVisible(true);
        }
        return isError;
    }


    private void addEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmpButtonActionPerformed
        addEmpButton.setBackground(Color.gray);
        removeEmpButton.setBackground(null);
        modifyEmpButton.setBackground(null);
        searchEmpButton.setBackground(null);

        if (action == 2) {
            tableSortFilter();
            enterEmpNum.setText("");
            enterEmpNum.getDocument().removeDocumentListener(docLis);
            updateTable();
        }

        action = 0;
        if (someEmp != null) {
            theHT.addToTable(someEmp);
        }
        enterEmpNum.setText("Employee Number");
        enterFName.setText("First Name");
        enterLName.setText("Last Name");
        enterDeducRate.setText("Deductions Rate");
        workLocBox.setSelectedIndex(0);
        enterAnnualSalary.setText("Annual Salary");
        enterHourlyWage.setText("Hourly Wage");
        enterHoursPWeek.setText("Hours Per Week");
        enterWeeksPYear.setText("Weeks Per Year");
        empNumLabel.setVisible(true);
        enterEmpNum.setVisible(true);
        fNameLabel.setVisible(true);
        enterFName.setVisible(true);
        lNameLabel.setVisible(true);
        enterLName.setVisible(true);
        deducRateLabel.setVisible(true);
        enterDeducRate.setVisible(true);
        workLocLabel.setVisible(true);
        workLocBox.setVisible(true);
        empType.setVisible(true);
        annualSalaryLabel.setVisible(false);
        enterAnnualSalary.setVisible(false);
        hourlyWageLabel.setVisible(false);
        enterHourlyWage.setVisible(false);
        hoursPWeekLabel.setVisible(false);
        enterHoursPWeek.setVisible(false);
        weeksPYearLabel.setVisible(false);
        enterWeeksPYear.setVisible(false);
        saveButton.setVisible(false);
        empType.setSelectedIndex(0);
    }//GEN-LAST:event_addEmpButtonActionPerformed

    private void enterFNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterFNameMouseClicked
        if ("First Name".equals(enterFName.getText())) {
            enterFName.setText("");
        }
    }//GEN-LAST:event_enterFNameMouseClicked

    private void enterLNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterLNameMouseClicked
        if ("Last Name".equals(enterLName.getText())) {
            enterLName.setText("");
        }
    }//GEN-LAST:event_enterLNameMouseClicked

    private void enterDeducRateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterDeducRateMouseClicked
        if ("Deductions Rate".equals(enterDeducRate.getText())) {
            enterDeducRate.setText("");
        }
    }//GEN-LAST:event_enterDeducRateMouseClicked

    private void empTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empTypeActionPerformed
        switch (empType.getSelectedIndex()) {
            case 0:
                annualSalaryLabel.setVisible(false);
                enterAnnualSalary.setVisible(false);
                hourlyWageLabel.setVisible(false);
                enterHourlyWage.setVisible(false);
                hoursPWeekLabel.setVisible(false);
                enterHoursPWeek.setVisible(false);
                weeksPYearLabel.setVisible(false);
                enterWeeksPYear.setVisible(false);
                saveButton.setVisible(false);
                break;
            case 1:
                annualSalaryLabel.setVisible(true);
                enterAnnualSalary.setVisible(true);
                hourlyWageLabel.setVisible(false);
                enterHourlyWage.setVisible(false);
                hoursPWeekLabel.setVisible(false);
                enterHoursPWeek.setVisible(false);
                weeksPYearLabel.setVisible(false);
                enterWeeksPYear.setVisible(false);
                saveButton.setVisible(true);
                break;
            case 2:
                hourlyWageLabel.setVisible(true);
                enterHourlyWage.setVisible(true);
                hoursPWeekLabel.setVisible(true);
                enterHoursPWeek.setVisible(true);
                weeksPYearLabel.setVisible(true);
                enterWeeksPYear.setVisible(true);
                annualSalaryLabel.setVisible(false);
                enterAnnualSalary.setVisible(false);
                saveButton.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_empTypeActionPerformed

    private void enterFNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterFNameFocusLost
        if ("".equals(enterFName.getText())) {
            enterFName.setText("First Name");
        }
    }//GEN-LAST:event_enterFNameFocusLost

    private void enterLNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterLNameFocusLost
        if ("".equals(enterLName.getText())) {
            enterLName.setText("Last Name");
        }
    }//GEN-LAST:event_enterLNameFocusLost

    private void enterDeducRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterDeducRateFocusLost
        if ("".equals(enterDeducRate.getText())) {
            enterDeducRate.setText("Deductions Rate");
        }
    }//GEN-LAST:event_enterDeducRateFocusLost

    private void enterAnnualSalaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterAnnualSalaryMouseClicked
        if ("Annual Salary".equals(enterAnnualSalary.getText())) {
            enterAnnualSalary.setText("");
        }
    }//GEN-LAST:event_enterAnnualSalaryMouseClicked

    private void enterAnnualSalaryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterAnnualSalaryFocusLost
        if ("".equals(enterAnnualSalary.getText())) {
            enterAnnualSalary.setText("Annual Salary");
        }
    }//GEN-LAST:event_enterAnnualSalaryFocusLost

    private void enterHourlyWageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterHourlyWageMouseClicked
        if ("Hourly Wage".equals(enterHourlyWage.getText())) {
            enterHourlyWage.setText("");
        }
    }//GEN-LAST:event_enterHourlyWageMouseClicked

    private void enterHourlyWageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterHourlyWageFocusLost
        if ("".equals(enterHourlyWage.getText())) {
            enterHourlyWage.setText("Hourly Wage");
        }
    }//GEN-LAST:event_enterHourlyWageFocusLost

    private void enterHoursPWeekMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterHoursPWeekMouseClicked
        if ("Hours Per Week".equals(enterHoursPWeek.getText())) {
            enterHoursPWeek.setText("");
        }
    }//GEN-LAST:event_enterHoursPWeekMouseClicked

    private void enterHoursPWeekFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterHoursPWeekFocusLost
        if ("".equals(enterHoursPWeek.getText())) {
            enterHoursPWeek.setText("Hours Per Week");
        }
    }//GEN-LAST:event_enterHoursPWeekFocusLost

    private void enterWeeksPYearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterWeeksPYearMouseClicked
        if ("Weeks Per Year".equals(enterWeeksPYear.getText())) {
            enterWeeksPYear.setText("");
        }
    }//GEN-LAST:event_enterWeeksPYearMouseClicked

    private void enterWeeksPYearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterWeeksPYearFocusLost
        if ("".equals(enterWeeksPYear.getText())) {
            enterWeeksPYear.setText("Weeks Per Year");
        }
    }//GEN-LAST:event_enterWeeksPYearFocusLost

    private void removeEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmpButtonActionPerformed
        addEmpButton.setBackground(null);
        removeEmpButton.setBackground(Color.gray);
        modifyEmpButton.setBackground(null);
        searchEmpButton.setBackground(null);

        if (action == 2) {
            tableSortFilter();
            enterEmpNum.setText("");
            enterEmpNum.getDocument().removeDocumentListener(docLis);
            updateTable();
        }

        action = 1;
        if (someEmp != null) {
            theHT.addToTable(someEmp);
        }
        enterEmpNum.setText("Employee Number");
        enterFName.setText("First Name");
        enterLName.setText("Last Name");
        enterDeducRate.setText("Deductions Rate");
        workLocBox.setSelectedIndex(0);
        enterAnnualSalary.setText("Annual Salary");
        enterHourlyWage.setText("Hourly Wage");
        enterHoursPWeek.setText("Hours Per Week");
        enterWeeksPYear.setText("Weeks Per Year");
        empNumLabel.setVisible(true);
        enterEmpNum.setVisible(true);
        fNameLabel.setVisible(false);
        enterFName.setVisible(false);
        lNameLabel.setVisible(false);
        enterLName.setVisible(false);
        deducRateLabel.setVisible(false);
        enterDeducRate.setVisible(false);
        workLocLabel.setVisible(false);
        workLocBox.setVisible(false);
        empType.setVisible(false);
        annualSalaryLabel.setVisible(false);
        enterAnnualSalary.setVisible(false);
        hourlyWageLabel.setVisible(false);
        enterHourlyWage.setVisible(false);
        hoursPWeekLabel.setVisible(false);
        enterHoursPWeek.setVisible(false);
        weeksPYearLabel.setVisible(false);
        enterWeeksPYear.setVisible(false);
        empType.setSelectedIndex(0);
        saveButton.setVisible(false);
    }//GEN-LAST:event_removeEmpButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Boolean noError = false;
        switch (action) {
            case 0:
                //Add
                if (someEmp != null) {
                    theHT.addToTable(someEmp);
                }

                if (!modifyAddErrorCheck()) {
                    noError = true;

                    if (empType.getSelectedIndex() == 1) {
                        someEmp = new FullTimeEmployee(Integer.parseInt(enterEmpNum.getText()), enterFName.getText(), enterLName.getText(), Double.parseDouble(enterDeducRate.getText()), workLocBox.getSelectedIndex(), Double.parseDouble(enterAnnualSalary.getText()));
                    } else if (empType.getSelectedIndex() == 2) {
                        someEmp = new PartTimeEmployee(Integer.parseInt(enterEmpNum.getText()), enterFName.getText(), enterLName.getText(), Double.parseDouble(enterDeducRate.getText()), workLocBox.getSelectedIndex(), Double.parseDouble(enterHourlyWage.getText()), Double.parseDouble(enterHoursPWeek.getText()), Double.parseDouble(enterWeeksPYear.getText()));
                    }
                    theHT.addToTable(someEmp);
                    enterEmpNum.setText("Employee Number");
                    enterFName.setText("First Name");
                    enterLName.setText("Last Name");
                    enterDeducRate.setText("Deductions Rate");
                    workLocBox.setSelectedIndex(0);
                    enterAnnualSalary.setText("Annual Salary");
                    enterHourlyWage.setText("Hourly Wage");
                    enterHoursPWeek.setText("Hours Per Week");
                    enterWeeksPYear.setText("Weeks Per Year");
                    empNumLabel.setVisible(false);
                    enterEmpNum.setVisible(false);
                    fNameLabel.setVisible(false);
                    enterFName.setVisible(false);
                    lNameLabel.setVisible(false);
                    enterLName.setVisible(false);
                    deducRateLabel.setVisible(false);
                    enterDeducRate.setVisible(false);
                    workLocLabel.setVisible(false);
                    workLocBox.setVisible(false);
                    empType.setVisible(false);
                    annualSalaryLabel.setVisible(false);
                    enterAnnualSalary.setVisible(false);
                    hourlyWageLabel.setVisible(false);
                    enterHourlyWage.setVisible(false);
                    hoursPWeekLabel.setVisible(false);
                    enterHoursPWeek.setVisible(false);
                    weeksPYearLabel.setVisible(false);
                    enterWeeksPYear.setVisible(false);
                    saveButton.setVisible(false);
                }
                break;
            case 1:
                //Remove
                if (someEmp != null) {
                    theHT.addToTable(someEmp);
                }

                if (!rMErrorCheck()) {
                    noError = true;

                    theHT.removeFromTable(Integer.parseInt(enterEmpNum.getText()));

                    enterEmpNum.setText("");
                    enterEmpNum.getDocument().removeDocumentListener(docLis);
                    enterEmpNum.setText("Employee Number");
                    enterFName.setText("First Name");
                    enterLName.setText("Last Name");
                    enterDeducRate.setText("Deductions Rate");
                    workLocBox.setSelectedIndex(0);
                    enterAnnualSalary.setText("Annual Salary");
                    enterHourlyWage.setText("Hourly Wage");
                    enterHoursPWeek.setText("Hours Per Week");
                    enterWeeksPYear.setText("Weeks Per Year");
                    empNumLabel.setVisible(true);
                    enterEmpNum.setVisible(true);
                    fNameLabel.setVisible(false);
                    enterFName.setVisible(false);
                    lNameLabel.setVisible(false);
                    enterLName.setVisible(false);
                    deducRateLabel.setVisible(false);
                    enterDeducRate.setVisible(false);
                    workLocLabel.setVisible(false);
                    workLocBox.setVisible(false);
                    empType.setVisible(false);
                    annualSalaryLabel.setVisible(false);
                    enterAnnualSalary.setVisible(false);
                    hourlyWageLabel.setVisible(false);
                    enterHourlyWage.setVisible(false);
                    hoursPWeekLabel.setVisible(false);
                    enterHoursPWeek.setVisible(false);
                    weeksPYearLabel.setVisible(false);
                    enterWeeksPYear.setVisible(false);
                    saveButton.setVisible(false);
                }
                break;
            case 2:
                //Modify
                if (!modifyAddErrorCheck()) {
                    noError = true;

                    if (empType.getSelectedIndex() == 1) {
                        someEmp = new FullTimeEmployee(Integer.parseInt(enterEmpNum.getText()), enterFName.getText(), enterLName.getText(), Double.parseDouble(enterDeducRate.getText()), workLocBox.getSelectedIndex(), Double.parseDouble(enterAnnualSalary.getText()));
                    } else if (empType.getSelectedIndex() == 2) {
                        someEmp = new PartTimeEmployee(Integer.parseInt(enterEmpNum.getText()), enterFName.getText(), enterLName.getText(), Double.parseDouble(enterDeducRate.getText()), workLocBox.getSelectedIndex(), Double.parseDouble(enterHourlyWage.getText()), Double.parseDouble(enterHoursPWeek.getText()), Double.parseDouble(enterWeeksPYear.getText()));
                    }
                    theHT.addToTable(someEmp);
                    someEmp = null;
                    tableSortFilter();
                    enterEmpNum.setText("");
                    enterEmpNum.getDocument().removeDocumentListener(docLis);
                    enterEmpNum.setText("Employee Number");
                    enterFName.setText("First Name");
                    enterLName.setText("Last Name");
                    enterDeducRate.setText("Deductions Rate");
                    workLocBox.setSelectedIndex(0);
                    enterAnnualSalary.setText("Annual Salary");
                    enterHourlyWage.setText("Hourly Wage");
                    enterHoursPWeek.setText("Hours Per Week");
                    enterWeeksPYear.setText("Weeks Per Year");
                    empNumLabel.setVisible(false);
                    enterEmpNum.setVisible(false);
                    fNameLabel.setVisible(false);
                    enterFName.setVisible(false);
                    lNameLabel.setVisible(false);
                    enterLName.setVisible(false);
                    deducRateLabel.setVisible(false);
                    enterDeducRate.setVisible(false);
                    workLocLabel.setVisible(false);
                    workLocBox.setVisible(false);
                    empType.setVisible(false);
                    annualSalaryLabel.setVisible(false);
                    enterAnnualSalary.setVisible(false);
                    hourlyWageLabel.setVisible(false);
                    enterHourlyWage.setVisible(false);
                    hoursPWeekLabel.setVisible(false);
                    enterHoursPWeek.setVisible(false);
                    weeksPYearLabel.setVisible(false);
                    enterWeeksPYear.setVisible(false);
                    saveButton.setVisible(false);
                }
                break;
            default:
                break;
        }
        if (noError) {
            someEmp = null;
            updateTable();
            theHT.displayTable();
            action = -1;
            new Save().setVisible(true);
            addEmpButton.setBackground(null);
            removeEmpButton.setBackground(null);
            modifyEmpButton.setBackground(null);
            searchEmpButton.setBackground(null);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void modifyEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyEmpButtonActionPerformed
        addEmpButton.setBackground(null);
        removeEmpButton.setBackground(null);
        modifyEmpButton.setBackground(Color.gray);
        searchEmpButton.setBackground(null);

        if (action == 2) {
            tableSortFilter();
            enterEmpNum.setText("");
            enterEmpNum.getDocument().removeDocumentListener(docLis);
            updateTable();
        }

        action = 2;
        if (someEmp != null) {
            theHT.addToTable(someEmp);
        }
        enterEmpNum.setText("Employee Number");
        empNumLabel.setVisible(true);
        enterEmpNum.setVisible(true);
        fNameLabel.setVisible(false);
        enterFName.setVisible(false);
        lNameLabel.setVisible(false);
        enterLName.setVisible(false);
        deducRateLabel.setVisible(false);
        enterDeducRate.setVisible(false);
        workLocLabel.setVisible(false);
        workLocBox.setVisible(false);
        empType.setVisible(false);
        annualSalaryLabel.setVisible(false);
        enterAnnualSalary.setVisible(false);
        hourlyWageLabel.setVisible(false);
        enterHourlyWage.setVisible(false);
        hoursPWeekLabel.setVisible(false);
        enterHoursPWeek.setVisible(false);
        weeksPYearLabel.setVisible(false);
        enterWeeksPYear.setVisible(false);
        saveButton.setVisible(false);
    }//GEN-LAST:event_modifyEmpButtonActionPerformed

    private void searchEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmpButtonActionPerformed
        addEmpButton.setBackground(null);
        removeEmpButton.setBackground(null);
        modifyEmpButton.setBackground(null);
        searchEmpButton.setBackground(Color.gray);

        if (action == 2) {
            tableSortFilter();
            enterEmpNum.setText("");
            enterEmpNum.getDocument().removeDocumentListener(docLis);
            updateTable();
        }

        action = 3;
        if (someEmp != null) {
            theHT.addToTable(someEmp);
        }
        enterEmpNum.setText("Employee Number");
        enterFName.setText("First Name");
        enterLName.setText("Last Name");
        enterDeducRate.setText("Deductions Rate");
        workLocBox.setSelectedIndex(0);
        enterAnnualSalary.setText("Annual Salary");
        enterHourlyWage.setText("Hourly Wage");
        enterHoursPWeek.setText("Hours Per Week");
        enterWeeksPYear.setText("Weeks Per Year");
        empNumLabel.setVisible(true);
        enterEmpNum.setVisible(true);
        fNameLabel.setVisible(false);
        enterFName.setVisible(false);
        lNameLabel.setVisible(false);
        enterLName.setVisible(false);
        deducRateLabel.setVisible(false);
        enterDeducRate.setVisible(false);
        workLocLabel.setVisible(false);
        workLocBox.setVisible(false);
        empType.setVisible(false);
        annualSalaryLabel.setVisible(false);
        enterAnnualSalary.setVisible(false);
        hourlyWageLabel.setVisible(false);
        enterHourlyWage.setVisible(false);
        hoursPWeekLabel.setVisible(false);
        enterHoursPWeek.setVisible(false);
        weeksPYearLabel.setVisible(false);
        enterWeeksPYear.setVisible(false);
        empType.setSelectedIndex(0);
        saveButton.setVisible(false);
    }//GEN-LAST:event_searchEmpButtonActionPerformed

    private void enterEmpNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterEmpNumActionPerformed
        if (action == 2) {//Modify
            if (someEmp != null) {
                theHT.addToTable(someEmp);
            }

            if (!rMErrorCheck()) {
                enterEmpNum.getDocument().removeDocumentListener(docLis);

                someEmp = theHT.removeFromTable(Integer.parseInt(enterEmpNum.getText()));

                enterEmpNum.setText(someEmp.getEmployeeNumber() + "");
                enterFName.setText(someEmp.getFirstName());
                enterLName.setText(someEmp.getLastName());
                enterDeducRate.setText(someEmp.getDeductionsRate() + "");
                workLocBox.setSelectedIndex(someEmp.getWorkLocation());

                if (someEmp instanceof FullTimeEmployee) {
                    enterAnnualSalary.setText(((FullTimeEmployee) someEmp).getAnnualSalary() + "");
                    empType.setSelectedIndex(1);
                    annualSalaryLabel.setVisible(true);
                    enterAnnualSalary.setVisible(true);
                    hourlyWageLabel.setVisible(false);
                    enterHourlyWage.setVisible(false);
                    hoursPWeekLabel.setVisible(false);
                    enterHoursPWeek.setVisible(false);
                    weeksPYearLabel.setVisible(false);
                    enterWeeksPYear.setVisible(false);

                } else if (someEmp instanceof PartTimeEmployee) {
                    enterHourlyWage.setText(((PartTimeEmployee) someEmp).getHourlyWage() + "");
                    enterHoursPWeek.setText(((PartTimeEmployee) someEmp).getHoursPerWeek() + "");
                    enterWeeksPYear.setText(((PartTimeEmployee) someEmp).getWeeksPerYear() + "");
                    empType.setSelectedIndex(2);
                    annualSalaryLabel.setVisible(false);
                    enterAnnualSalary.setVisible(false);
                    hourlyWageLabel.setVisible(true);
                    enterHourlyWage.setVisible(true);
                    hoursPWeekLabel.setVisible(true);
                    enterHoursPWeek.setVisible(true);
                    weeksPYearLabel.setVisible(true);
                    enterWeeksPYear.setVisible(true);
                }

                empNumLabel.setVisible(true);
                enterEmpNum.setVisible(true);
                fNameLabel.setVisible(true);
                enterFName.setVisible(true);
                lNameLabel.setVisible(true);
                enterLName.setVisible(true);
                deducRateLabel.setVisible(true);
                enterDeducRate.setVisible(true);
                workLocLabel.setVisible(true);
                workLocBox.setVisible(true);
                empType.setVisible(true);
                saveButton.setVisible(true);
            }
        }
    }//GEN-LAST:event_enterEmpNumActionPerformed

    private void enterEmpNumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterEmpNumMouseClicked

    }//GEN-LAST:event_enterEmpNumMouseClicked

    private void enterEmpNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterEmpNumFocusLost
        String empNum = enterEmpNum.getText();
        if (action != 2) {
            enterEmpNum.setText("");
        }
        enterEmpNum.getDocument().removeDocumentListener(docLis);
        if (action != 2) {
            updateTable();
        }
        enterEmpNum.setText(empNum);
        if ("".equals(enterEmpNum.getText())) {
            enterEmpNum.setText("Employee Number");
        }
    }//GEN-LAST:event_enterEmpNumFocusLost

    private void enterEmpNumFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterEmpNumFocusGained
        if ("Employee Number".equals(enterEmpNum.getText())) {
            enterEmpNum.setText("");
        }
        if (action == 1) {
            tableSortFilter();
            saveButton.setVisible(true);
        } else if (action == 3 || (action == 2 && !saveButton.isVisible())) {
            tableSortFilter();
        }
    }//GEN-LAST:event_enterEmpNumFocusGained

    private void enterFNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterFNameFocusGained
        if ("First Name".equals(enterFName.getText())) {
            enterFName.setText("");
        }
    }//GEN-LAST:event_enterFNameFocusGained

    private void enterLNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterLNameFocusGained
        if ("Last Name".equals(enterLName.getText())) {
            enterLName.setText("");
        }
    }//GEN-LAST:event_enterLNameFocusGained

    private void enterDeducRateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterDeducRateFocusGained
        if ("Deductions Rate".equals(enterDeducRate.getText())) {
            enterDeducRate.setText("");
        }
    }//GEN-LAST:event_enterDeducRateFocusGained

    private void enterAnnualSalaryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterAnnualSalaryFocusGained
        if ("Annual Salary".equals(enterAnnualSalary.getText())) {
            enterAnnualSalary.setText("");
        }
    }//GEN-LAST:event_enterAnnualSalaryFocusGained

    private void enterHourlyWageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterHourlyWageFocusGained
        if ("Hourly Wage".equals(enterHourlyWage.getText())) {
            enterHourlyWage.setText("");
        }
    }//GEN-LAST:event_enterHourlyWageFocusGained

    private void enterHoursPWeekFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterHoursPWeekFocusGained
        if ("Hours Per Week".equals(enterHoursPWeek.getText())) {
            enterHoursPWeek.setText("");
        }
    }//GEN-LAST:event_enterHoursPWeekFocusGained

    private void enterWeeksPYearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterWeeksPYearFocusGained
        if ("Weeks Per Year".equals(enterWeeksPYear.getText())) {
            enterWeeksPYear.setText("");
        }
    }//GEN-LAST:event_enterWeeksPYearFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmpDB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmpButton;
    private javax.swing.JLabel annualSalaryLabel;
    private javax.swing.JPanel databasePanel;
    private javax.swing.JLabel deducRateLabel;
    private javax.swing.JLabel empNumLabel;
    private javax.swing.JTable empTable;
    private javax.swing.JComboBox<String> empType;
    private javax.swing.JTextField enterAnnualSalary;
    private javax.swing.JTextField enterDeducRate;
    private javax.swing.JTextField enterEmpNum;
    private javax.swing.JTextField enterFName;
    private javax.swing.JTextField enterHourlyWage;
    private javax.swing.JTextField enterHoursPWeek;
    private javax.swing.JTextField enterLName;
    private javax.swing.JTextField enterWeeksPYear;
    private javax.swing.JLabel fNameLabel;
    private javax.swing.JLabel hourlyWageLabel;
    private javax.swing.JLabel hoursPWeekLabel;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lNameLabel;
    private javax.swing.JButton modifyEmpButton;
    private javax.swing.JButton removeEmpButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchEmpButton;
    private javax.swing.JLabel weeksPYearLabel;
    private javax.swing.JComboBox<String> workLocBox;
    private javax.swing.JLabel workLocLabel;
    // End of variables declaration//GEN-END:variables
}
